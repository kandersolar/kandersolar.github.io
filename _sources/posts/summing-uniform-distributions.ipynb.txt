{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Summing Uniform Distributions\n",
    "\n",
    "The distribution of the sum of N uniformly distributed variables came up in a recent RdTools PR.  The approach taken there was to just sample each distribution and sum the samples, but I wondered how it could be done analytically.  This notebook is inspired by [this StackExchange post](https://math.stackexchange.com/a/2966816/197200) and extends the derivation from just summing two uniform distributions on $[0,1]$ to two distributions with arbitrary bounds.\n",
    "\n",
    "Given two independent random variables $A$ and $B$ with probability densities $f_a(x)$ and $f_b(x)$, the probability density $f_c(x)$ of their sum $A + B = C$ is given by the convolution $f_a * f_b$:\n",
    "\n",
    "$$\n",
    "f_c(x) = \\int_{-\\infty}^{\\infty} f_a(x') f_b(x - x') \\mathrm{d}x'\n",
    "$$\n",
    "\n",
    "For the case where $A$ and $B$ are uniformly distributed, we have:\n",
    "\n",
    "$$\n",
    "f_a(x) = \\begin{cases} \n",
    "      \\frac{1}{a_2 - a_1} & a_1 \\le x \\le a_2 \\\\\n",
    "      0 & \\mathrm{otherwise} \n",
    "   \\end{cases}\n",
    "$$\n",
    "\n",
    "$$\n",
    "f_b(x) = \\begin{cases} \n",
    "      \\frac{1}{b_2 - b_1} & b_1 \\le x \\le b_2 \\\\\n",
    "      0 & \\mathrm{otherwise} \n",
    "   \\end{cases}\n",
    "$$\n",
    "\n",
    "Using these definitions, let's visualize in the $X'-X$ plane where the integrand is nonzero:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "a1 = 0.2\n",
    "a2 = 1.0\n",
    "b1 = 1.0\n",
    "b2 = 2.5\n",
    "\n",
    "Xlim = [1, 4]\n",
    "Xplim = [0, 1.2]\n",
    "Xp, X = np.meshgrid(np.linspace(*Xplim, 1000), np.linspace(*Xlim, 1000))\n",
    "nonzero = (a1 <= Xp) & (Xp <= a2) & (b1 <= X - Xp) & (X - Xp <= b2)\n",
    "\n",
    "plt.imshow(nonzero, extent=Xplim + Xlim, aspect='auto', origin='lower')\n",
    "plt.xlabel(\"x'\")\n",
    "plt.ylabel(\"x\")\n",
    "\n",
    "plt.axhline(b1 + a1, c='cyan')\n",
    "plt.axhline(b1 + a2, c='cyan')\n",
    "plt.axhline(b2 + a1, c='cyan')\n",
    "plt.axhline(b2 + a2, c='cyan');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The cross-section of the parallelogram is the range of $x'$ where the integrand is nonzero, so the lower and upper bounds of each cross-section define the limits of integration as a function of $x$.  Notice that it can be divided into three domains with nonzero probability, drawn here separated by the cyan lines. Going up from the bottom, they are defined by:\n",
    "\n",
    "| Domain | &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Domain bounds &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | &nbsp;&nbsp; Integration bounds &nbsp;&nbsp;|\n",
    "| --- | --- | --- |\n",
    "| 1 | $b_1 + a_1 \\le x \\le b_1 + a_2$ | $a_1 \\le x' \\le x - b_1$ |\n",
    "| 2 | $b_1 + a_2 \\le x \\le b_2 + a_1$ | $a_1 \\le x' \\le a_2$ |\n",
    "| 3 | $b_2 + a_1 \\le x \\le b_2 + a_2$ | $x - b_2 \\le x' \\le a_2$ |\n",
    "\n",
    "Finally, note that with the restricted bounds of integration $x_1$ and $x_2$, the integrand becomes the constant $(a_2-a_1)^{-1}(b_2-b_1)^{-1}$ and so the integral simplifies:\n",
    "\n",
    "$$\n",
    "\\begin{align}\n",
    "f_c(x) &= \\frac{1}{(a_2-a_1)(b_2-b_1)} \\int_{x'_1}^{x'_2} \\mathrm{d}x' \\\\\n",
    "       &= \\frac{x'_2 - x'_1}{(a_2-a_1)(b_2-b_1)}\n",
    "\\end{align}\n",
    "$$\n",
    "\n",
    "where $x'_1$ and $x'_2$ are given by the integration bounds in the above table as a function of $x$.\n",
    "\n",
    "Note that we have assumed $b_1 + a_2 \\le b_2 + a_1$.  If that is not the case, swap the $a$s and $b$s.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Numerical approach\n",
    "N = 10000000\n",
    "A = np.random.uniform(a1, a2, N)\n",
    "bd = 1/(b2-b1)\n",
    "B = np.random.uniform(b1, b2, N)\n",
    "C = A + B\n",
    "\n",
    "plt.hist(C, bins=100, density=True, label='numerical PDF')\n",
    "\n",
    "\n",
    "# Analytical approach\n",
    "scale = 1/(a2-a1)/(b2-b1)\n",
    "\n",
    "def f_c(x, a1, a2, b1, b2):\n",
    "    if a1 + b2 < b1 + a2:\n",
    "        a1, a2, b1, b2 = b1, b2, a1, a2\n",
    "\n",
    "    y = np.zeros_like(x)\n",
    "    region1 = (b1 + a1 <= x) & (x <= b1 + a2)\n",
    "    region2 = (b1 + a2 <= x) & (x <= b2 + a1)\n",
    "    region3 = (b2 + a1 <= x) & (x <= b2 + a2)\n",
    "    y[region1] = scale * (x[region1] - b1 - a1)\n",
    "    y[region2] = scale * (a2 - a1)\n",
    "    y[region3] = scale * (a2 - (x[region3] - b2))\n",
    "    return y\n",
    "\n",
    "x = np.linspace(a1+b1, a2+b2, 1000)\n",
    "y = f_c(x, a1, a2, b1, b2)\n",
    "plt.plot(x, y, label='analytical PDF')\n",
    "plt.xlabel('x')\n",
    "plt.legend();"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Going back to the original problem of summing not just two random variables but $N$ of them, it seems reasonable to expect that increasing $N$ will increase the order of the polynomials involved, and visualizing it for $N=3$ does show some higher-order behavior:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXQAAAD7CAYAAAB68m/qAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuNCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8QVMy6AAAACXBIWXMAAAsTAAALEwEAmpwYAAAVfElEQVR4nO3df5BdZZ3n8feXhhCDkR9JRqwkmJQGhRmQkUtkxULQcSsMY4IiTJiiZtgZp0XIgrrsFrrK7rCUJTPW7MKaSiYgC3GVqLHAHiYuOxZYNbMIpjOJjAliQuzZdGpLmuBkiEOAJt/9o28yl+Z27unk9o/79PtV1cU95zz3nu/DoT48/Zznno7MRJLU+Y6Z6AIkSe1hoEtSIQx0SSqEgS5JhTDQJakQBrokFaJSoEfEkoh4OiJ2RMTNTY7/14jYUv/5WUT8Y9srlSQdVrRahx4RXcDPgA8B/cBG4KrM3DZC+38L/GZm/mGba5UkHcaxFdosBnZk5k6AiFgHLAOaBjpwFfCfWn3o7Nmzc8GCBRXLlCQBbNq06bnMnNPsWJVAnwvsatjuB97TrGFEvBVYCDwywvFuoBvgtNNOo7e3t8LpJUkHRcQ/jHSs3TdFlwPrM/PVZgczc01m1jKzNmdO0//BSJKOUJVA3w3Mb9ieV9/XzHLg/qMtSpI0elUCfSOwKCIWRsQ0hkK7Z3ijiHgncDLww/aWKEmqouUcemYORsQK4GGgC7gnM7dGxK1Ab2YeDPflwLr08Y3SpPTKK6/Q39/P/v37J7oUVTB9+nTmzZvHcccdV/k9LZctjpVarZbeFJXGz89//nNmzpzJrFmziIiJLkeHkZns2bOHF154gYULF77mWERsysxas/f5TVFpiti/f79h3iEiglmzZo36tykDXZpCDPPOcSTXykCXpEJU+WKRpAItuPmv2vp5fV+6tK2fNxZ6enrYtm0bN9/8ukdStbRgwQJ6e3uZPXv26/bPnDmTiODUU09l7dq1nHrqqYf2A7z66qt89KMf5fOf/zzTp0+nr6+PM844g3e84x2HPudHP/oR06ZNO6r+GejqaCOF0kjh0ti+sc3Rhttoz6fxNzg4yNKlS1m6dGnbP/vRRx9l9uzZfO5zn+OLX/wid95552v279u3j+7ubj7xiU9w3333AfC2t72NLVu2tLUOA11FqhLQ7RyhGtyt9fX1cckll/C+972Pxx57jLlz5/Ld736XN7zhDVx00UV8+ctfplar8dxzz1Gr1ejr6+Pee+/lwQcf5Fe/+hXbt2/npptu4uWXX+ZrX/saxx9/PBs2bOCUU07hmWee4frrr2dgYIAZM2Zw11138c53vpNrrrmG6dOns3nzZi644ALOPvtsent7+cpXvsIvfvELrr32Wnbu3AnAqlWreO9738tll13Grl272L9/PzfeeCPd3d2V+3jhhRceCvNGb3zjG1m9ejXz58/n+eefb9u/0+EMdHWcdk8VtNtI9Y32t4kSbd++nfvvv5+77rqLK6+8ku985ztcffXVh33PT37yEzZv3sz+/ft5+9vfzu23387mzZv59Kc/zdq1a/nUpz5Fd3c3q1evZtGiRTzxxBNcd911PPLI0COl+vv7eeyxx+jq6uLee+899Lk33HAD73//+3nggQd49dVX2bdvHwD33HMPp5xyCi+++CLnnXcel19+ObNmzarUv4ceeoizzjqr6bE3velNLFy4kO3bt/PmN7+ZZ555hnPOOQeACy64gJUrV1Y6x+EY6OoIkz3EVc3ChQsPhdi5555LX19fy/dcfPHFzJw5k5kzZ3LiiSfy4Q9/GICzzjqLJ598kn379vHYY49xxRVXHHrPSy+9dOj1FVdcQVdX1+s+95FHHmHt2rUAdHV1ceKJJwJw55138sADDwCwa9cutm/f3jLQL774Yrq6ujj77LO57bbbRmzX+L0fp1wkdbTjjz/+0Ouuri5efPFFAI499lgOHDgA8Lq1143vOeaYYw5tH3PMMQwODnLgwAFOOumkEcPxhBNOqFzfD37wA77//e/zwx/+kBkzZnDRRRdVWgt+cK78cF544QX6+vo4/fTT2bt3b+WaRsNli5q0Ftz8V4d+SjZV+nk4CxYsYNOmTQCsX79+VO89OJXx7W9/GxgaBf/4xz9u+b4PfvCDrFq1ChhahbJ371727t3LySefzIwZM/jpT3/K448/PsqeNLdv3z6uu+46LrvsMk4++eS2fGYzjtA1qUzlUIPxvbk6mebub7rpJq688krWrFnDpZeOvq6vf/3rfPKTn+S2227jlVdeYfny5bzrXe867HvuuOMOuru7+epXv0pXVxerVq1iyZIlrF69+tCSwvPPP/9IuwQMTcVkJgcOHOAjH/kIX/jCF47q81rxWS6aVKZ6oDdqd+A+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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "A = np.random.uniform(a1, a2, N)\n",
    "bd = 1/(b2-b1)\n",
    "B = np.random.uniform(b1, b2, N)\n",
    "C = np.random.uniform(1.6, 2.0, N)\n",
    "D = A + B + C\n",
    "\n",
    "plt.hist(D, bins=100, density=True, label='numerical PDF')\n",
    "plt.legend();"
   ]
  }
 ],
 "metadata": {
  "date": "2020-09-25",
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  },
  "tags": "math, python",
  "toc-showtags": false
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
